plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.6'
	id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
    id "org.sonarqube" version "4.4.1.3373"
}

group = 'com.quasar'
version = '0.0.1-SNAPSHOT'
description = 'API for the Quasar Fire Operation mission, inspired by Star Wars, developed in Java 25 with Spring Boot.' +
        ' Implements hexagonal architecture and design patterns. Calculates the position and reconstructs the distress' +
        ' message of an imperial ship based on satellite data, offering RESTful endpoints and ready for cloud deployment.'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(25)
	}
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
	mavenCentral()
}

ext {
    set('springCloudVersion', "2025.0.0")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.13'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

test {
    useJUnitPlatform()
    jvmArgs("--add-opens", "java.base/java.time=ALL-UNNAMED")
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
        csv.required = false
        xml.outputLocation.set(layout.buildDirectory.file("jacoco/xml/jacoco.xml"))
        html.outputLocation.set(layout.buildDirectory.dir("jacoco/html"))
    }
}

sonarqube {
    properties {
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.exclusions", "**/MicroserviceApplication.java,**/QuasarFireOperationApiApplication.java"
        property "sonar.java.source", "25"
        property "sonar.java.target", "25"
        property "sonar.junit.reportsPath", "${layout.buildDirectory.file('reports/tests')}"
        property "sonar.jacoco.reportPaths", "${layout.buildDirectory.file('jacoco/jacoco.xml')}"

        property "sonar.host.url", System.getenv("SONAR_HOST_URL") ?: "http://localhost:9000"
        property "sonar.login", System.getenv("SONAR_TOKEN") ?: ""
    }
}

tasks.sonarqube.dependsOn test

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.8
            }
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
